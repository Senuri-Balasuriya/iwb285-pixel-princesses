// ../node_modules/jquery-toast-plugin/dist/jquery.toast.min.js
"function" != typeof Object.create && (Object.create = function(t) {
  function o() {
  }
  return o.prototype = t, new o();
}), function(t, o, i, s) {
  "use strict";
  var n = { _positionClasses: ["bottom-left", "bottom-right", "top-right", "top-left", "bottom-center", "top-center", "mid-center"], _defaultIcons: ["success", "error", "info", "warning"], init: function(o2, i2) {
    this.prepareOptions(o2, t.toast.options), this.process();
  }, prepareOptions: function(o2, i2) {
    var s2 = {};
    "string" == typeof o2 || o2 instanceof Array ? s2.text = o2 : s2 = o2, this.options = t.extend({}, i2, s2);
  }, process: function() {
    this.setup(), this.addToDom(), this.position(), this.bindToast(), this.animate();
  }, setup: function() {
    var o2 = "";
    if (this._toastEl = this._toastEl || t("<div></div>", { "class": "jq-toast-single" }), o2 += '<span class="jq-toast-loader"></span>', this.options.allowToastClose && (o2 += '<span class="close-jq-toast-single">&times;</span>'), this.options.text instanceof Array) {
      this.options.heading && (o2 += '<h2 class="jq-toast-heading">' + this.options.heading + "</h2>"), o2 += '<ul class="jq-toast-ul">';
      for (var i2 = 0; i2 < this.options.text.length; i2++) o2 += '<li class="jq-toast-li" id="jq-toast-item-' + i2 + '">' + this.options.text[i2] + "</li>";
      o2 += "</ul>";
    } else this.options.heading && (o2 += '<h2 class="jq-toast-heading">' + this.options.heading + "</h2>"), o2 += this.options.text;
    this._toastEl.html(o2), this.options.bgColor !== false && this._toastEl.css("background-color", this.options.bgColor), this.options.textColor !== false && this._toastEl.css("color", this.options.textColor), this.options.textAlign && this._toastEl.css("text-align", this.options.textAlign), this.options.icon !== false && (this._toastEl.addClass("jq-has-icon"), -1 !== t.inArray(this.options.icon, this._defaultIcons) && this._toastEl.addClass("jq-icon-" + this.options.icon)), this.options["class"] !== false && this._toastEl.addClass(this.options["class"]);
  }, position: function() {
    "string" == typeof this.options.position && -1 !== t.inArray(this.options.position, this._positionClasses) ? "bottom-center" === this.options.position ? this._container.css({ left: t(o).outerWidth() / 2 - this._container.outerWidth() / 2, bottom: 20 }) : "top-center" === this.options.position ? this._container.css({ left: t(o).outerWidth() / 2 - this._container.outerWidth() / 2, top: 20 }) : "mid-center" === this.options.position ? this._container.css({ left: t(o).outerWidth() / 2 - this._container.outerWidth() / 2, top: t(o).outerHeight() / 2 - this._container.outerHeight() / 2 }) : this._container.addClass(this.options.position) : "object" == typeof this.options.position ? this._container.css({ top: this.options.position.top ? this.options.position.top : "auto", bottom: this.options.position.bottom ? this.options.position.bottom : "auto", left: this.options.position.left ? this.options.position.left : "auto", right: this.options.position.right ? this.options.position.right : "auto" }) : this._container.addClass("bottom-left");
  }, bindToast: function() {
    var t2 = this;
    this._toastEl.on("afterShown", function() {
      t2.processLoader();
    }), this._toastEl.find(".close-jq-toast-single").on("click", function(o2) {
      o2.preventDefault(), "fade" === t2.options.showHideTransition ? (t2._toastEl.trigger("beforeHide"), t2._toastEl.fadeOut(function() {
        t2._toastEl.trigger("afterHidden");
      })) : "slide" === t2.options.showHideTransition ? (t2._toastEl.trigger("beforeHide"), t2._toastEl.slideUp(function() {
        t2._toastEl.trigger("afterHidden");
      })) : (t2._toastEl.trigger("beforeHide"), t2._toastEl.hide(function() {
        t2._toastEl.trigger("afterHidden");
      }));
    }), "function" == typeof this.options.beforeShow && this._toastEl.on("beforeShow", function() {
      t2.options.beforeShow();
    }), "function" == typeof this.options.afterShown && this._toastEl.on("afterShown", function() {
      t2.options.afterShown();
    }), "function" == typeof this.options.beforeHide && this._toastEl.on("beforeHide", function() {
      t2.options.beforeHide();
    }), "function" == typeof this.options.afterHidden && this._toastEl.on("afterHidden", function() {
      t2.options.afterHidden();
    });
  }, addToDom: function() {
    var o2 = t(".jq-toast-wrap");
    if (0 === o2.length ? (o2 = t("<div></div>", { "class": "jq-toast-wrap" }), t("body").append(o2)) : (!this.options.stack || isNaN(parseInt(this.options.stack, 10))) && o2.empty(), o2.find(".jq-toast-single:hidden").remove(), o2.append(this._toastEl), this.options.stack && !isNaN(parseInt(this.options.stack), 10)) {
      var i2 = o2.find(".jq-toast-single").length, s2 = i2 - this.options.stack;
      s2 > 0 && t(".jq-toast-wrap").find(".jq-toast-single").slice(0, s2).remove();
    }
    this._container = o2;
  }, canAutoHide: function() {
    return this.options.hideAfter !== false && !isNaN(parseInt(this.options.hideAfter, 10));
  }, processLoader: function() {
    if (!this.canAutoHide() || this.options.loader === false) return false;
    var t2 = this._toastEl.find(".jq-toast-loader"), o2 = (this.options.hideAfter - 400) / 1e3 + "s", i2 = this.options.loaderBg, s2 = t2.attr("style") || "";
    s2 = s2.substring(0, s2.indexOf("-webkit-transition")), s2 += "-webkit-transition: width " + o2 + " ease-in;                       -o-transition: width " + o2 + " ease-in;                       transition: width " + o2 + " ease-in;                       background-color: " + i2 + ";", t2.attr("style", s2).addClass("jq-toast-loaded");
  }, animate: function() {
    var t2 = this;
    if (this._toastEl.hide(), this._toastEl.trigger("beforeShow"), "fade" === this.options.showHideTransition.toLowerCase() ? this._toastEl.fadeIn(function() {
      t2._toastEl.trigger("afterShown");
    }) : "slide" === this.options.showHideTransition.toLowerCase() ? this._toastEl.slideDown(function() {
      t2._toastEl.trigger("afterShown");
    }) : this._toastEl.show(function() {
      t2._toastEl.trigger("afterShown");
    }), this.canAutoHide()) {
      var t2 = this;
      o.setTimeout(function() {
        "fade" === t2.options.showHideTransition.toLowerCase() ? (t2._toastEl.trigger("beforeHide"), t2._toastEl.fadeOut(function() {
          t2._toastEl.trigger("afterHidden");
        })) : "slide" === t2.options.showHideTransition.toLowerCase() ? (t2._toastEl.trigger("beforeHide"), t2._toastEl.slideUp(function() {
          t2._toastEl.trigger("afterHidden");
        })) : (t2._toastEl.trigger("beforeHide"), t2._toastEl.hide(function() {
          t2._toastEl.trigger("afterHidden");
        }));
      }, this.options.hideAfter);
    }
  }, reset: function(o2) {
    "all" === o2 ? t(".jq-toast-wrap").remove() : this._toastEl.remove();
  }, update: function(t2) {
    this.prepareOptions(t2, this.options), this.setup(), this.bindToast();
  } };
  t.toast = function(t2) {
    var o2 = Object.create(n);
    return o2.init(t2, this), { reset: function(t3) {
      o2.reset(t3);
    }, update: function(t3) {
      o2.update(t3);
    } };
  }, t.toast.options = { text: "", heading: "", showHideTransition: "fade", allowToastClose: true, hideAfter: 3e3, loader: true, loaderBg: "#9EC600", stack: 5, position: "bottom-left", bgColor: false, textColor: false, textAlign: "left", icon: false, beforeShow: function() {
  }, afterShown: function() {
  }, beforeHide: function() {
  }, afterHidden: function() {
  } };
}(jQuery, window, document);
//# sourceMappingURL=jquery-toast-plugin.js.map
